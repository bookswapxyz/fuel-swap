/* Autogenerated file. Do not edit manually. */

/* tslint:disable */
/* eslint-disable */

/*
  Fuels version: 0.89.1
  Forc version: 0.60.0
  Fuel-Core version: 0.27.0
*/

import type {
  BigNumberish,
  BN,
  BytesLike,
  Contract,
  DecodedValue,
  FunctionFragment,
  Interface,
  InvokeFunction,
} from 'fuels';

import type { Option, Enum } from "./common";

export enum InitErrorInput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export enum InitErrorOutput { AssetPairAlreadySet = 'AssetPairAlreadySet', AssetPairNotSet = 'AssetPairNotSet', IdenticalAssets = 'IdenticalAssets' };
export type InputErrorInput = Enum<{ CannotAddLessThanMinimumLiquidity: BigNumberish, DeadlinePassed: BigNumberish, ExpectedNonZeroAmount: AssetIdInput, ExpectedNonZeroParameter: AssetIdInput, InvalidAsset: [] }>;
export type InputErrorOutput = Enum<{ CannotAddLessThanMinimumLiquidity: BN, DeadlinePassed: BN, ExpectedNonZeroAmount: AssetIdOutput, ExpectedNonZeroParameter: AssetIdOutput, InvalidAsset: [] }>;
export type TransactionErrorInput = Enum<{ DesiredAmountTooHigh: BigNumberish, DesiredAmountTooLow: BigNumberish, ExpectedNonZeroDeposit: AssetIdInput, InsufficientReserve: AssetIdInput, NoLiquidityToRemove: [] }>;
export type TransactionErrorOutput = Enum<{ DesiredAmountTooHigh: BN, DesiredAmountTooLow: BN, ExpectedNonZeroDeposit: AssetIdOutput, InsufficientReserve: AssetIdOutput, NoLiquidityToRemove: [] }>;

export type AddLiquidityEventInput = { added_assets: AssetPairInput, liquidity: AssetInput };
export type AddLiquidityEventOutput = { added_assets: AssetPairOutput, liquidity: AssetOutput };
export type AssetInput = { id: AssetIdInput, amount: BigNumberish };
export type AssetOutput = { id: AssetIdOutput, amount: BN };
export type AssetIdInput = { bits: string };
export type AssetIdOutput = AssetIdInput;
export type AssetPairInput = { a: AssetInput, b: AssetInput };
export type AssetPairOutput = { a: AssetOutput, b: AssetOutput };
export type DefineAssetPairEventInput = { asset_a_id: AssetIdInput, asset_b_id: AssetIdInput };
export type DefineAssetPairEventOutput = { asset_a_id: AssetIdOutput, asset_b_id: AssetIdOutput };
export type DepositEventInput = { deposited_asset: AssetInput, new_balance: BigNumberish };
export type DepositEventOutput = { deposited_asset: AssetOutput, new_balance: BN };
export type PoolInfoInput = { reserves: AssetPairInput, liquidity: BigNumberish };
export type PoolInfoOutput = { reserves: AssetPairOutput, liquidity: BN };
export type PreviewAddLiquidityInfoInput = { other_asset_to_add: AssetInput, liquidity_asset_to_receive: AssetInput };
export type PreviewAddLiquidityInfoOutput = { other_asset_to_add: AssetOutput, liquidity_asset_to_receive: AssetOutput };
export type PreviewSwapInfoInput = { other_asset: AssetInput, sufficient_reserve: boolean };
export type PreviewSwapInfoOutput = { other_asset: AssetOutput, sufficient_reserve: boolean };
export type RemoveLiquidityEventInput = { removed_reserve: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityEventOutput = { removed_reserve: AssetPairOutput, burned_liquidity: AssetOutput };
export type RemoveLiquidityInfoInput = { removed_amounts: AssetPairInput, burned_liquidity: AssetInput };
export type RemoveLiquidityInfoOutput = { removed_amounts: AssetPairOutput, burned_liquidity: AssetOutput };
export type SwapEventInput = { input: AssetInput, output: AssetInput };
export type SwapEventOutput = { input: AssetOutput, output: AssetOutput };
export type WithdrawEventInput = { withdrawn_asset: AssetInput, remaining_balance: BigNumberish };
export type WithdrawEventOutput = { withdrawn_asset: AssetOutput, remaining_balance: BN };

export type ExchangeContractAbiConfigurables = {
  LIQUIDITY_MINER_FEE: BigNumberish;
  MINIMUM_LIQUIDITY: BigNumberish;
};

interface ExchangeContractAbiInterface extends Interface {
  functions: {
    add_liquidity: FunctionFragment;
    balance: FunctionFragment;
    constructor: FunctionFragment;
    deposit: FunctionFragment;
    pool_info: FunctionFragment;
    preview_add_liquidity: FunctionFragment;
    preview_swap_exact_input: FunctionFragment;
    preview_swap_exact_output: FunctionFragment;
    remove_liquidity: FunctionFragment;
    swap_exact_input: FunctionFragment;
    swap_exact_output: FunctionFragment;
    test1: FunctionFragment;
    test2: FunctionFragment;
    test3: FunctionFragment;
    withdraw: FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'add_liquidity', values: [BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'balance', values: [AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'constructor', values: [AssetIdInput, AssetIdInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'deposit', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'pool_info', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'preview_add_liquidity', values: [AssetInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'preview_swap_exact_input', values: [AssetInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'preview_swap_exact_output', values: [AssetInput]): Uint8Array;
  encodeFunctionData(functionFragment: 'remove_liquidity', values: [BigNumberish, BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_exact_input', values: [Option<BigNumberish>, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'swap_exact_output', values: [BigNumberish, BigNumberish]): Uint8Array;
  encodeFunctionData(functionFragment: 'test1', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'test2', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'test3', values: []): Uint8Array;
  encodeFunctionData(functionFragment: 'withdraw', values: [AssetInput]): Uint8Array;

  decodeFunctionData(functionFragment: 'add_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'balance', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'constructor', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'deposit', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'pool_info', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'preview_add_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'preview_swap_exact_input', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'preview_swap_exact_output', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'remove_liquidity', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_exact_input', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'swap_exact_output', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'test1', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'test2', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'test3', data: BytesLike): DecodedValue;
  decodeFunctionData(functionFragment: 'withdraw', data: BytesLike): DecodedValue;
}

export class ExchangeContractAbi extends Contract {
  interface: ExchangeContractAbiInterface;
  functions: {
    add_liquidity: InvokeFunction<[desired_liquidity: BigNumberish, deadline: BigNumberish], BN>;
    balance: InvokeFunction<[asset_id: AssetIdInput], BN>;
    constructor: InvokeFunction<[asset_a: AssetIdInput, asset_b: AssetIdInput], void>;
    deposit: InvokeFunction<[], void>;
    pool_info: InvokeFunction<[], PoolInfoOutput>;
    preview_add_liquidity: InvokeFunction<[asset: AssetInput], PreviewAddLiquidityInfoOutput>;
    preview_swap_exact_input: InvokeFunction<[exact_input_asset: AssetInput], PreviewSwapInfoOutput>;
    preview_swap_exact_output: InvokeFunction<[exact_output_asset: AssetInput], PreviewSwapInfoOutput>;
    remove_liquidity: InvokeFunction<[min_asset_a: BigNumberish, min_asset_b: BigNumberish, deadline: BigNumberish], RemoveLiquidityInfoOutput>;
    swap_exact_input: InvokeFunction<[min_output: Option<BigNumberish>, deadline: BigNumberish], BN>;
    swap_exact_output: InvokeFunction<[output: BigNumberish, deadline: BigNumberish], BN>;
    test1: InvokeFunction<[], void>;
    test2: InvokeFunction<[], void>;
    test3: InvokeFunction<[], void>;
    withdraw: InvokeFunction<[asset: AssetInput], void>;
  };
}
